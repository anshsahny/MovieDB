{"ast":null,"code":"var _jsxFileName = \"/Users/anshsahny/Ansh/Web Applications/MovieDB/client/src/components/Movie/Movie.js\";\nimport React, { Component } from 'react';\nimport { API_KEY, API_URL } from '../../config';\nimport Navigation from '../elements/Navigation/Navigation';\nimport MovieInfo from '../elements/MovieInfo/MovieInfo';\nimport MovieInfoBar from '../elements/MovieInfoBar/MovieInfoBar';\nimport FourColGrid from '../elements/FourColGrid/FourColGrid';\nimport Actor from '../elements/Actor/Actor';\nimport Spinner from '../elements/Spinner/Spinner';\nimport \"./Movie.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Movie extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      movie: null,\n      actors: null,\n      directors: [],\n      loading: false\n    };\n\n    this.fetchItems = async endpoint => {\n      const {\n        movieId\n      } = this.props.match.params;\n\n      try {\n        const result = await (await fetch(endpoint)).json();\n\n        if (result.status_code) {\n          this.setState({\n            loading: false\n          });\n        } else {\n          this.setState({\n            movie: result\n          });\n          const creditsEndpoint = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\n          const creditsResults = await (await fetch(creditsEndpoint)).json();\n          const directors = creditsResults.crew.filter(member => member.job === \"Director\");\n          this.setState({\n            actors: creditsResults.cast,\n            directors,\n            loading: false\n          }, () => {\n            localStorage.setItem(`${this.props.match.params.movieId}`, JSON.stringify(this.state));\n          });\n        }\n      } catch (e) {\n        console.log(\"There was an error: \", e);\n      }\n    };\n  }\n\n  componentDidMount() {\n    if (localStorage.getItem(`${this.props.match.params.movieId}`)) {\n      const state = JSON.parse(localStorage.getItem(`${this.props.match.params.movieId}`));\n      this.setState({ ...state\n      });\n    } else {\n      this.setState({\n        loading: true\n      });\n      const endpoint = `${API_URL}movie/${this.props.match.params.movieId}?api_key=${API_KEY}&language=en-US`;\n      this.fetchItems(endpoint);\n    }\n  }\n\n  // fetchItems = (endpoint) => {\n  //     fetch(endpoint).then(result => result.json()).then(result => {\n  //         if (result.status_code) {\n  //             this.setState({loading: false})\n  //         } else {\n  //             this.setState({\n  //                 movie: result,\n  //             }, () => {\n  //                 const endpoint = `${API_URL}movie/${this.props.match.params.movieId}/credits?api_key=${API_KEY}`\n  //                 fetch(endpoint).then(result => result.json()).then(result => {\n  //                     const directors = result.crew.filter(member => member.job === \"Director\")\n  //                     this.setState({\n  //                         actors: result.cast,\n  //                         directors,\n  //                         loading: false\n  //                     }, () => {\n  //                         localStorage.setItem(`${this.props.match.params.movieId}`, JSON.stringify(this.state))\n  //                     })\n  //                 })\n  //             })\n  //         }\n  //     }).catch(error => console.error(\"Error:\", error))\n  // }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"rmdb-movie\",\n      children: [this.state.movie ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Navigation, {\n          movie: this.props.location.movieName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(MovieInfo, {\n          movie: this.state.movie,\n          directors: this.state.directors\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(MovieInfoBar, {\n          time: this.state.movie.runtime,\n          budget: this.state.movie.budget,\n          revenue: this.state.movie.revenue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }, this) : null, this.state.actors ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rmdb-movie-grid\",\n        children: /*#__PURE__*/_jsxDEV(FourColGrid, {\n          header: 'Actors',\n          children: this.state.actors.map((element, i) => {\n            return /*#__PURE__*/_jsxDEV(Actor, {\n              actor: element\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 40\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }, this) : null, !this.state.actors && !this.state.loading ? /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"No Movie Found!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 62\n      }, this) : null, this.state.loading ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 39\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Movie;","map":{"version":3,"sources":["/Users/anshsahny/Ansh/Web Applications/MovieDB/client/src/components/Movie/Movie.js"],"names":["React","Component","API_KEY","API_URL","Navigation","MovieInfo","MovieInfoBar","FourColGrid","Actor","Spinner","Movie","state","movie","actors","directors","loading","fetchItems","endpoint","movieId","props","match","params","result","fetch","json","status_code","setState","creditsEndpoint","creditsResults","crew","filter","member","job","cast","localStorage","setItem","JSON","stringify","e","console","log","componentDidMount","getItem","parse","render","location","movieName","runtime","budget","revenue","map","element","i"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,OAAR,EAAiBC,OAAjB,QAA+B,cAA/B;AACA,OAAOC,UAAP,MAAuB,mCAAvB;AACA,OAAOC,SAAP,MAAsB,iCAAtB;AACA,OAAOC,YAAP,MAAyB,uCAAzB;AACA,OAAOC,WAAP,MAAwB,qCAAxB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,OAAP,MAAoB,6BAApB;AACA,OAAO,aAAP;;;AAEA,MAAMC,KAAN,SAAoBT,SAApB,CAA8B;AAAA;AAAA;AAAA,SAC1BU,KAD0B,GAClB;AACJC,MAAAA,KAAK,EAAE,IADH;AAEJC,MAAAA,MAAM,EAAE,IAFJ;AAGJC,MAAAA,SAAS,EAAE,EAHP;AAIJC,MAAAA,OAAO,EAAE;AAJL,KADkB;;AAAA,SAmB1BC,UAnB0B,GAmBb,MAAMC,QAAN,IAAkB;AAC3B,YAAM;AAACC,QAAAA;AAAD,UAAY,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,MAAnC;;AACA,UAAI;AACA,cAAMC,MAAM,GAAG,MAAK,CAAC,MAAMC,KAAK,CAACN,QAAD,CAAZ,EAAwBO,IAAxB,EAApB;;AACA,YAAIF,MAAM,CAACG,WAAX,EAAwB;AACpB,eAAKC,QAAL,CAAc;AAACX,YAAAA,OAAO,EAAE;AAAV,WAAd;AACH,SAFD,MAEO;AACH,eAAKW,QAAL,CAAc;AACVd,YAAAA,KAAK,EAAEU;AADG,WAAd;AAGA,gBAAMK,eAAe,GAAI,GAAExB,OAAQ,SAAQe,OAAQ,oBAAmBhB,OAAQ,EAA9E;AACA,gBAAM0B,cAAc,GAAG,MAAK,CAAC,MAAML,KAAK,CAACI,eAAD,CAAZ,EAA+BH,IAA/B,EAA5B;AACA,gBAAMV,SAAS,GAAGc,cAAc,CAACC,IAAf,CAAoBC,MAApB,CAA2BC,MAAM,IAAIA,MAAM,CAACC,GAAP,KAAe,UAApD,CAAlB;AACA,eAAKN,QAAL,CAAc;AACVb,YAAAA,MAAM,EAAEe,cAAc,CAACK,IADb;AAEVnB,YAAAA,SAFU;AAGVC,YAAAA,OAAO,EAAE;AAHC,WAAd,EAIG,MAAM;AACLmB,YAAAA,YAAY,CAACC,OAAb,CAAsB,GAAE,KAAKhB,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBH,OAAQ,EAAxD,EAA2DkB,IAAI,CAACC,SAAL,CAAe,KAAK1B,KAApB,CAA3D;AACH,WAND;AAOH;AACJ,OAnBD,CAoBA,OAAO2B,CAAP,EAAU;AACNC,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCF,CAApC;AACH;AACJ,KA5CyB;AAAA;;AAQ1BG,EAAAA,iBAAiB,GAAG;AAChB,QAAIP,YAAY,CAACQ,OAAb,CAAsB,GAAE,KAAKvB,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBH,OAAQ,EAAxD,CAAJ,EAAgE;AAC5D,YAAMP,KAAK,GAAGyB,IAAI,CAACO,KAAL,CAAWT,YAAY,CAACQ,OAAb,CAAsB,GAAE,KAAKvB,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBH,OAAQ,EAAxD,CAAX,CAAd;AACA,WAAKQ,QAAL,CAAc,EAAC,GAAGf;AAAJ,OAAd;AACH,KAHD,MAGO;AACH,WAAKe,QAAL,CAAc;AAACX,QAAAA,OAAO,EAAE;AAAV,OAAd;AACA,YAAME,QAAQ,GAAI,GAAEd,OAAQ,SAAQ,KAAKgB,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBH,OAAQ,YAAWhB,OAAQ,iBAAvF;AACA,WAAKc,UAAL,CAAgBC,QAAhB;AACH;AACJ;;AA6BD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA2B,EAAAA,MAAM,GAAG;AACL,wBACI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,iBACK,KAAKjC,KAAL,CAAWC,KAAX,gBACG;AAAA,gCACI,QAAC,UAAD;AAAY,UAAA,KAAK,EAAE,KAAKO,KAAL,CAAW0B,QAAX,CAAoBC;AAAvC;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,SAAD;AAAW,UAAA,KAAK,EAAE,KAAKnC,KAAL,CAAWC,KAA7B;AAAoC,UAAA,SAAS,EAAE,KAAKD,KAAL,CAAWG;AAA1D;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI,QAAC,YAAD;AAAc,UAAA,IAAI,EAAE,KAAKH,KAAL,CAAWC,KAAX,CAAiBmC,OAArC;AAA8C,UAAA,MAAM,EAAE,KAAKpC,KAAL,CAAWC,KAAX,CAAiBoC,MAAvE;AAA+E,UAAA,OAAO,EAAE,KAAKrC,KAAL,CAAWC,KAAX,CAAiBqC;AAAzG;AAAA;AAAA;AAAA;AAAA,gBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADH,GAMK,IAPV,EASK,KAAKtC,KAAL,CAAWE,MAAX,gBACG;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA,+BACI,QAAC,WAAD;AAAa,UAAA,MAAM,EAAE,QAArB;AAAA,oBACK,KAAKF,KAAL,CAAWE,MAAX,CAAkBqC,GAAlB,CAAsB,CAACC,OAAD,EAAUC,CAAV,KAAgB;AACnC,gCAAO,QAAC,KAAD;AAAe,cAAA,KAAK,EAAED;AAAtB,eAAYC,CAAZ;AAAA;AAAA;AAAA;AAAA,oBAAP;AACH,WAFA;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADH,GAQK,IAjBV,EAmBK,CAAC,KAAKzC,KAAL,CAAWE,MAAZ,IAAsB,CAAC,KAAKF,KAAL,CAAWI,OAAlC,gBAA4C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAA5C,GAAuE,IAnB5E,EAoBK,KAAKJ,KAAL,CAAWI,OAAX,gBAAqB,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,cAArB,GAAkC,IApBvC;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAwBH;;AA/FyB;;AAkG9B,eAAeL,KAAf","sourcesContent":["import React, {Component} from 'react'\nimport {API_KEY, API_URL} from '../../config'\nimport Navigation from '../elements/Navigation/Navigation'\nimport MovieInfo from '../elements/MovieInfo/MovieInfo'\nimport MovieInfoBar from '../elements/MovieInfoBar/MovieInfoBar'\nimport FourColGrid from '../elements/FourColGrid/FourColGrid'\nimport Actor from '../elements/Actor/Actor'\nimport Spinner from '../elements/Spinner/Spinner'\nimport \"./Movie.css\"\n\nclass Movie extends Component {\n    state = {\n        movie: null,\n        actors: null,\n        directors: [],\n        loading: false\n    }\n\n    componentDidMount() {\n        if (localStorage.getItem(`${this.props.match.params.movieId}`)) {\n            const state = JSON.parse(localStorage.getItem(`${this.props.match.params.movieId}`))\n            this.setState({...state})\n        } else {\n            this.setState({loading: true})\n            const endpoint = `${API_URL}movie/${this.props.match.params.movieId}?api_key=${API_KEY}&language=en-US`\n            this.fetchItems(endpoint)\n        }\n    }\n\n    fetchItems = async endpoint => {\n        const {movieId} = this.props.match.params\n        try {\n            const result = await(await fetch(endpoint)).json()\n            if (result.status_code) {\n                this.setState({loading: false})\n            } else {\n                this.setState({\n                    movie: result,\n                })\n                const creditsEndpoint = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`\n                const creditsResults = await(await fetch(creditsEndpoint)).json()\n                const directors = creditsResults.crew.filter(member => member.job === \"Director\")\n                this.setState({\n                    actors: creditsResults.cast,\n                    directors,\n                    loading: false\n                }, () => {\n                    localStorage.setItem(`${this.props.match.params.movieId}`, JSON.stringify(this.state))\n                })\n            }\n        }\n        catch (e) {\n            console.log(\"There was an error: \", e)\n        }\n    }\n\n    // fetchItems = (endpoint) => {\n    //     fetch(endpoint).then(result => result.json()).then(result => {\n    //         if (result.status_code) {\n    //             this.setState({loading: false})\n    //         } else {\n    //             this.setState({\n    //                 movie: result,\n    //             }, () => {\n    //                 const endpoint = `${API_URL}movie/${this.props.match.params.movieId}/credits?api_key=${API_KEY}`\n    //                 fetch(endpoint).then(result => result.json()).then(result => {\n    //                     const directors = result.crew.filter(member => member.job === \"Director\")\n    //                     this.setState({\n    //                         actors: result.cast,\n    //                         directors,\n    //                         loading: false\n    //                     }, () => {\n    //                         localStorage.setItem(`${this.props.match.params.movieId}`, JSON.stringify(this.state))\n    //                     })\n    //                 })\n    //             })\n    //         }\n    //     }).catch(error => console.error(\"Error:\", error))\n    // }\n\n    render() {\n        return (\n            <div className=\"rmdb-movie\">\n                {this.state.movie ? \n                    <div>\n                        <Navigation movie={this.props.location.movieName}/>\n                        <MovieInfo movie={this.state.movie} directors={this.state.directors}/>\n                        <MovieInfoBar time={this.state.movie.runtime} budget={this.state.movie.budget} revenue={this.state.movie.revenue}/>\n                    </div>\n                    : null\n                }\n                {this.state.actors ?\n                    <div className=\"rmdb-movie-grid\">\n                        <FourColGrid header={'Actors'}>\n                            {this.state.actors.map((element, i) => {\n                                return <Actor key={i} actor={element}/>\n                            })}\n                        </FourColGrid>\n                    </div>\n                    : null\n                }\n                {!this.state.actors && !this.state.loading ? <h1>No Movie Found!</h1> : null}\n                {this.state.loading ? <Spinner/> : null}\n            </div>\n        )\n    }\n}\n\nexport default Movie"]},"metadata":{},"sourceType":"module"}