{"ast":null,"code":"var _jsxFileName = \"/Users/anshsahny/Ansh/Web Applications/MovieDB/client/src/components/Movie/Movie.js\";\nimport React, { Component } from 'react';\nimport { API_KEY, API_URL } from '../../config';\nimport Navigation from '../elements/Navigation/Navigation';\nimport MovieInfo from '../elements/MovieInfo/MovieInfo';\nimport MovieInfoBar from '../elements/MovieInfoBar/MovieInfoBar';\nimport FourColGrid from '../elements/FourColGrid/FourColGrid';\nimport Actor from '../elements/Actor/Actor';\nimport Spinner from '../elements/Spinner/Spinner';\nimport \"./Movie.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Movie extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      movie: null,\n      actors: null,\n      directors: [],\n      loading: false\n    };\n\n    this.fetchItems = endpoint => {\n      fetch(endpoint).then(result => result.json()).then(result => {\n        if (result.status_code) {\n          this.setState({\n            loading: false\n          });\n        } else {\n          this.setState({\n            movie: result\n          }, () => {\n            const endpoint = `${API_URL}movie/${this.props.match.params.movieId}/credits?api_key=${API_KEY}`;\n            fetch(endpoint).then(result => result.json()).then(result => {\n              const directors = result.crew.filter(member => member.job === \"Director\");\n              this.setState({\n                actors: result.cast,\n                directors,\n                loading: false\n              });\n            });\n          });\n        }\n      }).catch(error => console.error(\"Error:\", error));\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      loading: true\n    });\n    const endpoint = `${API_URL}movie/${this.props.match.params.movieId}?api_key=${API_KEY}&language=en-US`;\n    this.fetchItems(endpoint);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"rmdb-movie\",\n      children: [this.state.movie ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Navigation, {\n          movie: this.props.location.movieName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(MovieInfo, {\n          movie: this.state.movie,\n          directors: this.state.directors\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(MovieInfoBar, {\n          time: this.state.movie.runtime,\n          budget: this.state.movie.budget,\n          revenue: this.state.movie.revenue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 21\n      }, this) : null, this.state.actors ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rmdb-movie-grid\",\n        children: /*#__PURE__*/_jsxDEV(FourColGrid, {\n          header: 'Actors',\n          children: this.state.actors.map((element, i) => {\n            return /*#__PURE__*/_jsxDEV(Actor, {\n              actor: element\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 40\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }, this) : null, !this.state.actors && !this.state.loading ? /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"No Movie Found!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 62\n      }, this) : null, this.state.loading ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 39\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Movie;","map":{"version":3,"sources":["/Users/anshsahny/Ansh/Web Applications/MovieDB/client/src/components/Movie/Movie.js"],"names":["React","Component","API_KEY","API_URL","Navigation","MovieInfo","MovieInfoBar","FourColGrid","Actor","Spinner","Movie","state","movie","actors","directors","loading","fetchItems","endpoint","fetch","then","result","json","status_code","setState","props","match","params","movieId","crew","filter","member","job","cast","catch","error","console","componentDidMount","render","location","movieName","runtime","budget","revenue","map","element","i"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport {API_KEY, API_URL} from '../../config'\nimport Navigation from '../elements/Navigation/Navigation'\nimport MovieInfo from '../elements/MovieInfo/MovieInfo'\nimport MovieInfoBar from '../elements/MovieInfoBar/MovieInfoBar'\nimport FourColGrid from '../elements/FourColGrid/FourColGrid'\nimport Actor from '../elements/Actor/Actor'\nimport Spinner from '../elements/Spinner/Spinner'\nimport \"./Movie.css\"\n\nclass Movie extends Component {\n    state = {\n        movie: null,\n        actors: null,\n        directors: [],\n        loading: false\n    }\n\n    componentDidMount() {\n        this.setState({loading: true})\n        const endpoint = `${API_URL}movie/${this.props.match.params.movieId}?api_key=${API_KEY}&language=en-US`\n        this.fetchItems(endpoint)\n    }\n\n    fetchItems = (endpoint) => {\n        fetch(endpoint).then(result => result.json()).then(result => {\n            if (result.status_code) {\n                this.setState({loading: false})\n            } else {\n                this.setState({\n                    movie: result,\n                }, () => {\n                    const endpoint = `${API_URL}movie/${this.props.match.params.movieId}/credits?api_key=${API_KEY}`\n                    fetch(endpoint).then(result => result.json()).then(result => {\n                        const directors = result.crew.filter(member => member.job === \"Director\")\n                        this.setState({\n                            actors: result.cast,\n                            directors,\n                            loading: false\n                        })\n                    })\n                })\n            }\n        }).catch(error => console.error(\"Error:\", error))\n    }\n\n    render() {\n        return (\n            <div className=\"rmdb-movie\">\n                {this.state.movie ? \n                    <div>\n                        <Navigation movie={this.props.location.movieName}/>\n                        <MovieInfo movie={this.state.movie} directors={this.state.directors}/>\n                        <MovieInfoBar time={this.state.movie.runtime} budget={this.state.movie.budget} revenue={this.state.movie.revenue}/>\n                    </div>\n                    : null\n                }\n                {this.state.actors ?\n                    <div className=\"rmdb-movie-grid\">\n                        <FourColGrid header={'Actors'}>\n                            {this.state.actors.map((element, i) => {\n                                return <Actor key={i} actor={element}/>\n                            })}\n                        </FourColGrid>\n                    </div>\n                    : null\n                }\n                {!this.state.actors && !this.state.loading ? <h1>No Movie Found!</h1> : null}\n                {this.state.loading ? <Spinner/> : null}\n            </div>\n        )\n    }\n}\n\nexport default Movie"]},"metadata":{},"sourceType":"module"}